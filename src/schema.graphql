scalar Date

type User {
  id: ID!
  name: String!
  email: String
  createdAt: Date!
  updatedAt: Date!

  posts(first: Int, skip: Int, orderBy: PostsOrderByInput): [Post!]!
  comments(first: Int, skip: Int, orderBy: CommentsOrderByInput): [Comment!]!
}

enum UserOrderByField {
  name
  createdAt
  updatedAt
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  createdAt: Date!
  updatedAt: Date!

  author: User!
  comments(first: Int, skip: Int, orderBy: CommentsOrderByInput): [Comment!]!
}

enum PostOrderByField {
  title
  body
  createdAt
  updatedAt
}

type Comment {
  id: ID!
  text: String!
  createdAt: Date!
  updatedAt: Date!

  author: User!
  post: Post!
}

enum CommentOrderByField {
  text
  createdAt
  updatedAt
}

type Query {
  me: User!

  users(
    search: String
    first: Int
    skip: Int
    after: ID
    orderBy: UsersOrderByInput
  ): [User!]!
  user(id: ID!): User!

  posts(
    search: String
    first: Int
    skip: Int
    after: ID
    orderBy: PostsOrderByInput
  ): [Post!]!
  post(id: ID!): Post!

  comments(
    search: String
    first: Int
    skip: Int
    after: ID
    orderBy: CommentsOrderByInput
  ): [Comment!]!
  comment(id: ID!): Comment!
}

enum OrderByOrder {
  ASC
  DESC
}

input UsersOrderByInput {
  field: UserOrderByField!
  order: OrderByOrder!
}

input PostsOrderByInput {
  field: PostOrderByField!
  order: OrderByOrder!
}

input CommentsOrderByInput {
  field: CommentOrderByField!
  order: OrderByOrder!
}

type Mutation {
  login(data: LoginInput!): AuthPayload!

  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!

  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!

  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}
input UpdateUserInput {
  name: String
  email: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}
input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  postId: ID!
}
input UpdateCommentInput {
  text: String
}
